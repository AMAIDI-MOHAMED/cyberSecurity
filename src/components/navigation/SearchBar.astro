---
/** SearchBar component (client-side filter stub) */
import Icon from "@ui/icons/Icon.astro";
import { searchFacets } from '@data/searchFacets.js';

interface Props { placeholder?: string }
const { placeholder = 'Search…' } = Astro.props as Props;
const path = Astro.url.pathname;
const isFi = path.startsWith('/fi');
const t = (en: string, fi: string) => isFi ? fi : en;
---
<div class="relative" data-search-root>
  <label class="sr-only" for="site-search">{t('Search site','Hae sivustolta')}</label>
  <input id="site-search" type="search" class="w-full rounded-md border border-slate-300 bg-white px-4 py-2 pr-9 text-sm shadow-sm focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500" placeholder={t(placeholder,'Haku…')} autocomplete="off" data-search-input />
  <div class="absolute inset-y-0 right-2 flex items-center pointer-events-none text-slate-400">
    <Icon name="documentMagnifyingGlass" class="w-5 h-5" />
  </div>
  <div class="hidden mt-2 flex-col gap-4 rounded-md border border-slate-200 bg-white p-4 shadow-lg text-sm max-h-[500px] overflow-y-auto w-full md:w-[640px] md:absolute md:left-0" data-search-panel aria-live="polite"></div>
</div>

<script type="module" is:inline>
document.addEventListener('DOMContentLoaded', function() {
  const searchRoot = document.querySelector('[data-search-root]');
  if (!searchRoot) return;
  
  const input = searchRoot.querySelector('[data-search-input]');
  const panel = searchRoot.querySelector('[data-search-panel]');
  
  if (!input || !panel) return;
  
  let searchTimeout;
  
  async function search(query) {
    if (!query.trim()) {
      showPopularSearches();
      return;
    }
    
    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      showResults(data, query);
    } catch (error) {
      showError();
    }
  }
  
  function showPopularSearches() {
    const popular = ['ISO 27001', 'NIS2', 'GDPR', 'SOC 2', 'DORA', 'Risk Assessment'];
    const html = `
      <div class="p-4">
        <p class="text-slate-600 mb-3 font-medium">Popular searches:</p>
        <div class="flex flex-wrap gap-2">
          ${popular.map(term => `
            <button class="px-3 py-1 bg-slate-100 text-slate-600 rounded-full text-sm hover:bg-blue-100 hover:text-blue-700 transition-colors" data-search-term="${term}">
              ${term}
            </button>
          `).join('')}
        </div>
      </div>
    `;
    panel.innerHTML = html;
    panel.classList.remove('hidden');
  }
  
  function showResults(data, query) {
    if (!data.results || data.results.length === 0) {
      panel.innerHTML = `
        <div class="p-4">
          <p class="text-slate-500">No results found for "${query}"</p>
        </div>
      `;
      panel.classList.remove('hidden');
      return;
    }
    
    const html = `
      <div class="p-4">
        <p class="text-slate-500 mb-4">${data.total} results for "${query}"</p>
        <div class="space-y-3 max-h-80 overflow-y-auto">
          ${data.results.map(result => `
            <a href="${result.url}" class="block p-3 hover:bg-slate-50 rounded-lg border border-slate-200 transition-colors">
              <div class="flex items-start justify-between">
                <div>
                  <h3 class="font-medium text-slate-900 text-sm">${result.title}</h3>
                  <p class="text-xs text-slate-600 mt-1">${result.content.substring(0, 120)}...</p>
                  <div class="flex items-center gap-2 mt-2">
                    <span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded">${result.type}</span>
                    ${result.framework ? `<span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded">${result.framework}</span>` : ''}
                  </div>
                </div>
                <svg class="w-4 h-4 text-slate-400 flex-shrink-0 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </div>
            </a>
          `).join('')}
        </div>
      </div>
    `;
    panel.innerHTML = html;
    panel.classList.remove('hidden');
  }
  
  function showError() {
    panel.innerHTML = `
      <div class="p-4">
        <p class="text-red-500">Search temporarily unavailable</p>
      </div>
    `;
    panel.classList.remove('hidden');
  }
  
  // Event listeners
  input.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      search(e.target.value);
    }, 300);
  });
  
  input.addEventListener('focus', () => {
    if (input.value.trim()) {
      search(input.value);
    } else {
      showPopularSearches();
    }
  });
  
  // Handle popular search clicks
  panel.addEventListener('click', (e) => {
    const searchTerm = e.target.getAttribute('data-search-term');
    if (searchTerm) {
      input.value = searchTerm;
      search(searchTerm);
    }
  });
  
  // Click outside to close
  document.addEventListener('click', (e) => {
    if (!searchRoot.contains(e.target)) {
      panel.classList.add('hidden');
    }
  });
  
  // Escape key to close
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      panel.classList.add('hidden');
      input.blur();
    }
  });
});
</script>

